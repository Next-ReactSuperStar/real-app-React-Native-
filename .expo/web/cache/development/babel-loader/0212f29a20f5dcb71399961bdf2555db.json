{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport MapView, { Marker } from 'react-native-maps';\nimport { TextInput } from 'react-native-paper';\nimport HomeSearchResult from \"../../components/homeSearch/HomeSearchResult\";\nimport HomeSearchShowResult from \"../../components/homeSearch/HomeSearchShowResult\";\nimport HomeListItem from \"../../components/home/HomeListItem\";\nimport { menuBtn } from \"../../../constants/menuBtn\";\n\nvar SearchScreen = function SearchScreen(_ref) {\n  var navigation = _ref.navigation;\n  var mapRef = useRef(null);\n  var initialPolygon = useRef({\n    polygons: [],\n    distance: 0,\n    lastLatLng: undefined,\n    initialLatLng: undefined,\n    centerLatLng: undefined\n  });\n  useEffect(function () {\n    fetchUsers();\n  }, [SearchScreen]);\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      showMap = _useState2[0],\n      setShowMap = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mapData = _useState4[0],\n      setMapData = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isReady = _useState6[0],\n      setIsReady = _useState6[1];\n\n  var win = Dimensions.get('window');\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      markerNum = _useState8[0],\n      setMarkerNum = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      noteShow = _useState10[0],\n      setNoteShow = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      chooseMarker = _useState12[0],\n      setChooseMarker = _useState12[1];\n\n  var _useState13 = useState({\n    latitude: 29.858924,\n    longitude: -95.587894,\n    latitudeDelta: 0.15,\n    longitudeDelta: 0.0421\n  }),\n      _useState14 = _slicedToArray(_useState13, 2),\n      initRegion = _useState14[0],\n      setInitRegion = _useState14[1];\n\n  var handleMapReady = useCallback(function () {\n    return mapRef.current && setIsReady(true);\n  }, []);\n\n  var _React$useState = React.useState(menuBtn),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      getMenuBtn = _React$useState2[0],\n      setMenuBtn = _React$useState2[1];\n\n  var fetchUsers = function fetchUsers() {\n    return _regeneratorRuntime.async(function fetchUsers$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('http://ec2-3-144-42-178.us-east-2.compute.amazonaws.com:5000/api/user/089c839e-5a55-471f-ac5d-62dba5f4fa65/getFilteredListingsAtLocation?latitude=29.858924&longitude=-95.587894&radius=0.02', {\n              method: 'get',\n              headers: {\n                'Content-Type': \"application/json\",\n                'password': 'passwordAUA'\n              }\n            }).then(function (response) {\n              return response.json();\n            }).then(function (responseJson) {\n              setMapData(_toConsumableArray(responseJson));\n            }).catch(function (error) {\n              fetchUsers();\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var zoomOut = function zoomOut() {\n    var camera;\n    return _regeneratorRuntime.async(function zoomOut$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (mapRef.current) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", false);\n\n          case 2:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(mapRef.current.getCamera());\n\n          case 4:\n            camera = _context2.sent;\n\n            if (Platform.OS === 'ios') {\n              mapRef.current.animateCamera({\n                altitude: camera.altitude * 0.9\n              });\n            }\n\n            if (Platform.OS === 'android') {\n              mapRef.current.animateCamera({\n                zoom: camera.zoom - 1\n              });\n            }\n\n            setChooseMarker(false);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var zoomIn = function zoomIn() {\n    var camera;\n    return _regeneratorRuntime.async(function zoomIn$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(mapRef.current.getCamera());\n\n          case 2:\n            camera = _context3.sent;\n\n            if (Platform.OS === 'ios') {\n              mapRef.current.animateCamera({\n                altitude: camera.altitude * 1.1\n              });\n            }\n\n            if (Platform.OS === 'android') {\n              mapRef.current.animateCamera({\n                zoom: camera.zoom + 1\n              });\n            }\n\n            setChooseMarker(false);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var markerClick = function markerClick(num) {\n    setMarkerNum(num);\n    setChooseMarker(true);\n  };\n\n  var closeNote = function closeNote() {\n    setNoteShow(false);\n  };\n\n  var _chooseItem = function chooseItem(num) {\n    console.log(num);\n    setShowMap(true);\n    setMarkerNum(num);\n    setChooseMarker(true);\n    setInitRegion({\n      latitude: mapData[num].latitude,\n      longitude: mapData[num].longitude,\n      latitudeDelta: initRegion.latitudeDelta,\n      longitudeDelta: initRegion.longitudeDelta\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      padding: 20,\n      paddingBottom: 5,\n      backgroundColor: 'white'\n    }\n  }, React.createElement(TextInput, {\n    autoComplete: 'pass',\n    mode: \"outlined\",\n    placeholder: \"Search address, or near you\",\n    outlineColor: \"#F2F3F7\",\n    activeOutlineColor: \"#888888\",\n    style: {\n      height: 40,\n      borderRadius: 10,\n      fontSize: 14,\n      width: win.width - 110\n    },\n    right: React.createElement(TextInput.Icon, {\n      style: {\n        marginTop: 15\n      },\n      name: \"microphone\",\n      color: \"#D0D8E0\"\n    })\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setShowMap(!showMap);\n    }\n  }, React.createElement(Image, {\n    style: {\n      width: 20,\n      height: 20,\n      marginTop: 15,\n      marginLeft: 10,\n      marginRight: 10\n    },\n    source: showMap ? require(\"../../../assets/icons/Group.png\") : require(\"../../../assets/icons/Group_(2).png\")\n  })), React.createElement(TouchableOpacity, null, React.createElement(Image, {\n    style: {\n      width: 20,\n      height: 20,\n      marginTop: 15,\n      marginRight: 5\n    },\n    source: require(\"../../../assets/icons/sliders.png\")\n  }))), React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, showMap ? React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(MapView, {\n    ref: mapRef,\n    style: {\n      flex: 1\n    },\n    onMapReady: handleMapReady,\n    provider: 'google',\n    showsMyLocationButton: true,\n    showsUserLocation: true,\n    zoomControlEnabled: true,\n    zoomEnabled: true,\n    zoomTapEnabled: true,\n    showsScale: true,\n    initialRegion: initRegion\n  }, mapData.map(function (item, index) {\n    return item && item.latitude && item.longitude && React.createElement(Marker, {\n      key: index,\n      coordinate: {\n        latitude: item.latitude,\n        longitude: item.longitude\n      },\n      onPress: function onPress() {\n        return markerClick(index);\n      }\n    }, React.createElement(Image, {\n      source: require(\"../../../assets/icons/maker_custom.png\"),\n      style: {\n        width: 39,\n        height: 84\n      },\n      resizeMode: \"contain\"\n    }));\n  })), React.createElement(View, {\n    style: {\n      position: 'absolute',\n      top: 20,\n      right: 20,\n      backgroundColor: 'white',\n      borderRadius: 30\n    }\n  }, React.createElement(View, {\n    style: {\n      padding: 5,\n      paddingTop: 5,\n      paddingBottom: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      borderRadius: 30\n    },\n    onPress: zoomIn\n  }, React.createElement(Image, {\n    style: {\n      width: 35,\n      height: 35,\n      borderRadius: 30\n    },\n    source: require(\"../../../assets/icons/Vector_(7).png\")\n  }))), React.createElement(View, {\n    style: {\n      padding: 5,\n      paddingTop: 5,\n      paddingBottom: 13\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      borderRadius: 30\n    },\n    onPress: zoomOut\n  }, React.createElement(Image, {\n    style: {\n      width: 35,\n      height: 20,\n      borderRadius: 30\n    },\n    source: require(\"../../../assets/icons/Vector_(8).png\")\n  })))), React.createElement(View, {\n    style: {\n      position: 'absolute',\n      top: 110,\n      right: 20\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      padding: 8,\n      backgroundColor: 'white',\n      borderRadius: 30\n    }\n  }, React.createElement(Image, {\n    style: {\n      width: 28,\n      height: 28\n    },\n    source: require(\"../../../assets/icons/Group_(3).png\")\n  }))), React.createElement(View, {\n    style: {\n      width: win.width - 30,\n      marginLeft: 15,\n      position: 'absolute',\n      bottom: 90\n    }\n  }, chooseMarker && React.createElement(HomeSearchResult, {\n    indexData: mapData[markerNum]\n  }), noteShow && React.createElement(HomeSearchShowResult, {\n    indexData: {\n      resultNum: mapData.length\n    },\n    closeNote: closeNote\n  }))) : React.createElement(View, {\n    style: {\n      flex: 1\n    }\n  }, React.createElement(ScrollView, null, React.createElement(View, {\n    style: styles.homeview\n  }, React.createElement(View, {\n    style: {\n      flex: 18,\n      backgroundColor: 'white',\n      width: '100%'\n    }\n  }, React.createElement(ScrollView, null, mapData.map(function (item, index) {\n    return React.createElement(HomeListItem, {\n      key: index,\n      indexData: item,\n      num: index,\n      chooseItem: function chooseItem() {\n        return _chooseItem(index);\n      }\n    });\n  }))), React.createElement(View, {\n    style: {\n      height: 100\n    }\n  }))))));\n};\n\nexport default SearchScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  button: {\n    top: '10%',\n    right: '10%',\n    position: 'absolute',\n    backgroundColor: 'tomato',\n    padding: 16,\n    zIndex: 4,\n    borderRadius: 18\n  },\n  title: {\n    color: '#FFFFFF',\n    fontSize: 12\n  },\n  homeview: {\n    padding: 15,\n    paddingTop: 0,\n    paddingBottom: 0,\n    backgroundColor: 'white'\n  }\n});","map":{"version":3,"sources":["D:/working/ReactNative/Real_estate/New folder/screens/tabScreens/homesearch/SearchScreen.tsx"],"names":["React","useState","useCallback","useRef","useEffect","MapView","Marker","TextInput","HomeSearchResult","HomeSearchShowResult","HomeListItem","menuBtn","SearchScreen","navigation","mapRef","initialPolygon","polygons","distance","lastLatLng","undefined","initialLatLng","centerLatLng","fetchUsers","showMap","setShowMap","mapData","setMapData","isReady","setIsReady","win","Dimensions","get","markerNum","setMarkerNum","noteShow","setNoteShow","chooseMarker","setChooseMarker","latitude","longitude","latitudeDelta","longitudeDelta","initRegion","setInitRegion","handleMapReady","current","getMenuBtn","setMenuBtn","fetch","method","headers","then","response","json","responseJson","catch","error","zoomOut","getCamera","camera","Platform","OS","animateCamera","altitude","zoom","zoomIn","markerClick","num","closeNote","chooseItem","console","log","styles","container","flexDirection","padding","paddingBottom","backgroundColor","height","borderRadius","fontSize","width","marginTop","marginLeft","marginRight","require","flex","map","item","index","position","top","right","paddingTop","bottom","resultNum","length","homeview","StyleSheet","create","button","zIndex","title","color"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,MAAvC,EAA+CC,SAA/C,QAAgE,OAAhE;;;;;;;;AAGA,OAAOC,OAAP,IAAkBC,MAAlB,QAAgC,mBAAhC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAGA,OAAOC,gBAAP;AACA,OAAOC,oBAAP;AAIA,OAAOC,YAAP;AAKA,SAASC,OAAT;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAA6C;AAAA,MAA1CC,UAA0C,QAA1CA,UAA0C;AAE9D,MAAMC,MAAM,GAAGX,MAAM,CAAM,IAAN,CAArB;AAEA,MAAMY,cAAkB,GAAGZ,MAAM,CAAC;AAC9Ba,IAAAA,QAAQ,EAAE,EADoB;AAE9BC,IAAAA,QAAQ,EAAE,CAFoB;AAG9BC,IAAAA,UAAU,EAAEC,SAHkB;AAI9BC,IAAAA,aAAa,EAAED,SAJe;AAK9BE,IAAAA,YAAY,EAAEF;AALgB,GAAD,CAAjC;AASAf,EAAAA,SAAS,CAAC,YAAM;AACZkB,IAAAA,UAAU;AACX,GAFM,EAEL,CAACV,YAAD,CAFK,CAAT;;AAIA,kBAA4BX,QAAQ,CAAU,IAAV,CAApC;AAAA;AAAA,MAAOsB,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA4BvB,QAAQ,CAAM,EAAN,CAApC;AAAA;AAAA,MAAOwB,OAAP;AAAA,MAAgBC,UAAhB;;AAIA,mBAA8BzB,QAAQ,CAAU,KAAV,CAAtC;AAAA;AAAA,MAAO0B,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAMC,GAAG,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAZ;;AAEA,mBAAkC9B,QAAQ,CAAM,CAAN,CAA1C;AAAA;AAAA,MAAO+B,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAgChC,QAAQ,CAAU,KAAV,CAAxC;AAAA;AAAA,MAAOiC,QAAP;AAAA,MAAiBC,WAAjB;;AACA,oBAAwClC,QAAQ,CAAU,KAAV,CAAhD;AAAA;AAAA,MAAOmC,YAAP;AAAA,MAAqBC,eAArB;;AACA,oBAAoCpC,QAAQ,CAAM;AAC9CqC,IAAAA,QAAQ,EAAE,SADoC;AAE9CC,IAAAA,SAAS,EAAE,CAAC,SAFkC;AAG9CC,IAAAA,aAAa,EAAE,IAH+B;AAI9CC,IAAAA,cAAc,EAAE;AAJ8B,GAAN,CAA5C;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AAMA,MAAMC,cAAc,GAAG1C,WAAW,CAAC;AAAA,WAAMY,MAAM,CAAC+B,OAAP,IAAkBjB,UAAU,CAAC,IAAD,CAAlC;AAAA,GAAD,EAA2C,EAA3C,CAAlC;;AAMA,wBAAiC5B,KAAK,CAACC,QAAN,CAAeU,OAAf,CAAjC;AAAA;AAAA,MAAOmC,UAAP;AAAA,MAAmBC,UAAnB;;AAUA,MAAMzB,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAGT0B,KAAK,CAAC,8LAAD,EAEX;AACIC,cAAAA,MAAM,EAAE,KADZ;AAEIC,cAAAA,OAAO,EAAE;AACL,gCAAgB,kBADX;AAEL,4BAAY;AAFP;AAFb,aAFW,CAAL,CAULC,IAVK,CAUA,UAACC,QAAD;AAAA,qBAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,aAVA,EAWLF,IAXK,CAWA,UAACG,YAAD,EAAkB;AAEpB5B,cAAAA,UAAU,oBAAK4B,YAAL,EAAV;AAEH,aAfK,EAeHC,KAfG,CAeG,UAACC,KAAD,EAAW;AAChBlC,cAAAA,UAAU;AACb,aAjBK,CAHS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAmEA,MAAMmC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACP3C,MAAM,CAAC+B,OADA;AAAA;AAAA;AAAA;;AAAA,8CACgB,KADhB;;AAAA;AAAA;AAAA,6CAGS/B,MAAM,CAAC+B,OAAP,CAAea,SAAf,EAHT;;AAAA;AAGNC,YAAAA,MAHM;;AAIZ,gBAAIC,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvB/C,cAAAA,MAAM,CAAC+B,OAAP,CAAeiB,aAAf,CAA6B;AAAEC,gBAAAA,QAAQ,EAAEJ,MAAM,CAACI,QAAP,GAAkB;AAA9B,eAA7B;AACH;;AAED,gBAAIH,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC3B/C,cAAAA,MAAM,CAAC+B,OAAP,CAAeiB,aAAf,CAA6B;AAAEE,gBAAAA,IAAI,EAAEL,MAAM,CAACK,IAAP,GAAc;AAAtB,eAA7B;AACH;;AACD3B,YAAAA,eAAe,CAAC,KAAD,CAAf;;AAXY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAcA,MAAM4B,MAAM,GAAG,SAATA,MAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACUnD,MAAM,CAAC+B,OAAP,CAAea,SAAf,EADV;;AAAA;AACLC,YAAAA,MADK;;AAEX,gBAAIC,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;AACvB/C,cAAAA,MAAM,CAAC+B,OAAP,CAAeiB,aAAf,CAA6B;AAAEC,gBAAAA,QAAQ,EAAEJ,MAAM,CAACI,QAAP,GAAkB;AAA9B,eAA7B;AACH;;AAED,gBAAIH,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC3B/C,cAAAA,MAAM,CAAC+B,OAAP,CAAeiB,aAAf,CAA6B;AAAEE,gBAAAA,IAAI,EAAEL,MAAM,CAACK,IAAP,GAAc;AAAtB,eAA7B;AACH;;AACD3B,YAAAA,eAAe,CAAC,KAAD,CAAf;;AATW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAYA,MAAM6B,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAa;AAC7BlC,IAAAA,YAAY,CAACkC,GAAD,CAAZ;AACA9B,IAAAA,eAAe,CAAC,IAAD,CAAf;AACH,GAHD;;AAqBA,MAAM+B,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpBjC,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAFD;;AAIA,MAAMkC,WAAU,GAAG,SAAbA,UAAa,CAACF,GAAD,EAAa;AAC5BG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA3C,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAS,IAAAA,YAAY,CAACkC,GAAD,CAAZ;AACA9B,IAAAA,eAAe,CAAC,IAAD,CAAf;AACAM,IAAAA,aAAa,CAAC;AAACL,MAAAA,QAAQ,EAACb,OAAO,CAAC0C,GAAD,CAAP,CAAa7B,QAAvB;AACAC,MAAAA,SAAS,EAACd,OAAO,CAAC0C,GAAD,CAAP,CAAa5B,SADvB;AAEAC,MAAAA,aAAa,EAACE,UAAU,CAACF,aAFzB;AAGAC,MAAAA,cAAc,EAACC,UAAU,CAACD;AAH1B,KAAD,CAAb;AAIH,GATD;;AAWA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE+B,MAAM,CAACC;AAApB,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,aAAa,EAAC,KAAf;AAAqBC,MAAAA,OAAO,EAAC,EAA7B;AAAgCC,MAAAA,aAAa,EAAC,CAA9C;AAAgDC,MAAAA,eAAe,EAAC;AAAhE;AAAb,KAEI,oBAAC,SAAD;AACQ,IAAA,YAAY,EAAE,MADtB;AAEQ,IAAA,IAAI,EAAC,UAFb;AAGQ,IAAA,WAAW,EAAC,6BAHpB;AAIQ,IAAA,YAAY,EAAC,SAJrB;AAKQ,IAAA,kBAAkB,EAAC,SAL3B;AAMQ,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAC,EAAR;AAAWC,MAAAA,YAAY,EAAC,EAAxB;AAA2BC,MAAAA,QAAQ,EAAC,EAApC;AACHC,MAAAA,KAAK,EAACpD,GAAG,CAACoD,KAAJ,GAAU;AADb,KANf;AAQQ,IAAA,KAAK,EAAE,oBAAC,SAAD,CAAW,IAAX;AAAgB,MAAA,KAAK,EAAE;AAACC,QAAAA,SAAS,EAAC;AAAX,OAAvB;AAAuC,MAAA,IAAI,EAAC,YAA5C;AAAyD,MAAA,KAAK,EAAC;AAA/D;AARf,IAFJ,EAYI,oBAAC,gBAAD;AAAmB,IAAA,OAAO,EAAE;AAAA,aAAM1D,UAAU,CAAC,CAACD,OAAF,CAAhB;AAAA;AAA5B,KACI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAAC0D,MAAAA,KAAK,EAAC,EAAP;AAAUH,MAAAA,MAAM,EAAC,EAAjB;AAAoBI,MAAAA,SAAS,EAAC,EAA9B;AAAiCC,MAAAA,UAAU,EAAC,EAA5C;AAA+CC,MAAAA,WAAW,EAAC;AAA3D,KAAd;AAA8E,IAAA,MAAM,EAAE7D,OAAO,GAAC8D,OAAO,mCAAR,GAA4CA,OAAO;AAAhJ,IADJ,CAZJ,EAeI,oBAAC,gBAAD,QACE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAACJ,MAAAA,KAAK,EAAC,EAAP;AAAUH,MAAAA,MAAM,EAAC,EAAjB;AAAoBI,MAAAA,SAAS,EAAC,EAA9B;AAAiCE,MAAAA,WAAW,EAAC;AAA7C,KAAd;AAA+D,IAAA,MAAM,EAAEC,OAAO;AAA9E,IADF,CAfJ,CADJ,EAoBI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACC,MAAAA,IAAI,EAAE;AAAP;AAAb,KACK/D,OAAO,GAAC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAC+D,MAAAA,IAAI,EAAE;AAAP;AAAb,KACL,oBAAC,OAAD;AACI,IAAA,GAAG,EAAExE,MADT;AAEI,IAAA,KAAK,EAAE;AAAEwE,MAAAA,IAAI,EAAE;AAAR,KAFX;AAOI,IAAA,UAAU,EAAE1C,cAPhB;AAYI,IAAA,QAAQ,EAAE,QAZd;AAaI,IAAA,qBAAqB,EAAE,IAb3B;AAcI,IAAA,iBAAiB,EAAE,IAdvB;AAeI,IAAA,kBAAkB,EAAE,IAfxB;AAgBI,IAAA,WAAW,EAAE,IAhBjB;AAiBI,IAAA,cAAc,EAAE,IAjBpB;AAkBI,IAAA,UAAU,EAAE,IAlBhB;AAmBI,IAAA,aAAa,EAAEF;AAnBnB,KAqBGjB,OAAO,CAAC8D,GAAR,CAAY,UAACC,IAAD,EAAWC,KAAX;AAAA,WACbD,IAAI,IAAIA,IAAI,CAAClD,QAAb,IAAyBkD,IAAI,CAACjD,SAA9B,IAAyC,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEkD,KAAb;AACrC,MAAA,UAAU,EAAE;AAACnD,QAAAA,QAAQ,EAAEkD,IAAI,CAAClD,QAAhB;AAA0BC,QAAAA,SAAS,EAAEiD,IAAI,CAACjD;AAA1C,OADyB;AAErC,MAAA,OAAO,EAAE;AAAA,eAAM2B,WAAW,CAACuB,KAAD,CAAjB;AAAA;AAF4B,OAIvC,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAEJ,OAAO,0CAAtB;AAAkE,MAAA,KAAK,EAAE;AAACJ,QAAAA,KAAK,EAAE,EAAR;AAAYH,QAAAA,MAAM,EAAE;AAApB,OAAzE;AAAmG,MAAA,UAAU,EAAC;AAA9G,MAJuC,CAD5B;AAAA,GAAZ,CArBH,CADK,EAyCL,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACY,MAAAA,QAAQ,EAAC,UAAV;AAAqBC,MAAAA,GAAG,EAAC,EAAzB;AAA4BC,MAAAA,KAAK,EAAC,EAAlC;AAAqCf,MAAAA,eAAe,EAAC,OAArD;AAA6DE,MAAAA,YAAY,EAAC;AAA1E;AAAb,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACJ,MAAAA,OAAO,EAAC,CAAT;AAAWkB,MAAAA,UAAU,EAAC,CAAtB;AAAwBjB,MAAAA,aAAa,EAAC;AAAtC;AAAb,KACI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE;AAACG,MAAAA,YAAY,EAAC;AAAd,KAAzB;AAA4C,IAAA,OAAO,EAAEd;AAArD,KACI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAACgB,MAAAA,KAAK,EAAC,EAAP;AAAUH,MAAAA,MAAM,EAAC,EAAjB;AAAoBC,MAAAA,YAAY,EAAC;AAAjC,KAAd;AAAoD,IAAA,MAAM,EAAGM,OAAO;AAApE,IADJ,CADJ,CADJ,EAMI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACV,MAAAA,OAAO,EAAC,CAAT;AAAWkB,MAAAA,UAAU,EAAC,CAAtB;AAAwBjB,MAAAA,aAAa,EAAC;AAAtC;AAAb,KACI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE;AAACG,MAAAA,YAAY,EAAC;AAAd,KAAzB;AAA4C,IAAA,OAAO,EAAEtB;AAArD,KACI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAACwB,MAAAA,KAAK,EAAC,EAAP;AAAUH,MAAAA,MAAM,EAAC,EAAjB;AAAoBC,MAAAA,YAAY,EAAC;AAAjC,KAAd;AAAoD,IAAA,MAAM,EAAEM,OAAO;AAAnE,IADJ,CADJ,CANJ,CAzCK,EAqDL,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACK,MAAAA,QAAQ,EAAC,UAAV;AAAqBC,MAAAA,GAAG,EAAC,GAAzB;AAA6BC,MAAAA,KAAK,EAAC;AAAnC;AAAb,KACI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE;AAACjB,MAAAA,OAAO,EAAC,CAAT;AAAWE,MAAAA,eAAe,EAAC,OAA3B;AAAmCE,MAAAA,YAAY,EAAC;AAAhD;AAAzB,KACI,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAE;AAACE,MAAAA,KAAK,EAAC,EAAP;AAAUH,MAAAA,MAAM,EAAC;AAAjB,KAAd;AAAoC,IAAA,MAAM,EAAGO,OAAO;AAApD,IADJ,CADJ,CArDK,EAoEL,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACJ,MAAAA,KAAK,EAACpD,GAAG,CAACoD,KAAJ,GAAU,EAAjB;AAAoBE,MAAAA,UAAU,EAAC,EAA/B;AAAkCO,MAAAA,QAAQ,EAAC,UAA3C;AAAsDI,MAAAA,MAAM,EAAC;AAA7D;AAAb,KACK1D,YAAY,IAAI,oBAAC,gBAAD;AAAkB,IAAA,SAAS,EAAEX,OAAO,CAACO,SAAD;AAApC,IADrB,EAEKE,QAAQ,IAAI,oBAAC,oBAAD;AAAsB,IAAA,SAAS,EAAE;AAAC6D,MAAAA,SAAS,EAACtE,OAAO,CAACuE;AAAnB,KAAjC;AAA6D,IAAA,SAAS,EAAE5B;AAAxE,IAFjB,CApEK,CAAD,GA2ER,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACkB,MAAAA,IAAI,EAAC;AAAN;AAAb,KACI,oBAAC,UAAD,QACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEd,MAAM,CAACyB;AAApB,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACX,MAAAA,IAAI,EAAC,EAAN;AAAST,MAAAA,eAAe,EAAC,OAAzB;AAAiCI,MAAAA,KAAK,EAAC;AAAvC;AAAb,KACI,oBAAC,UAAD,QACKxD,OAAO,CAAC8D,GAAR,CAAY,UAACC,IAAD,EAAUC,KAAV,EAAsB;AAAC,WAAM,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEA,KAAnB;AAA0B,MAAA,SAAS,EAAED,IAArC;AAA2C,MAAA,GAAG,EAAEC,KAAhD;AAAuD,MAAA,UAAU,EAAE;AAAA,eAAIpB,WAAU,CAACoB,KAAD,CAAd;AAAA;AAAnE,MAAN;AAAkG,GAArI,CADL,CADJ,CADJ,EAiCI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACX,MAAAA,MAAM,EAAC;AAAR;AAAb,IAjCJ,CADJ,CADJ,CA5EJ,CApBJ,CADJ;AA6IH,CAjUD;;AAmUA,eAAelE,YAAf;AAEA,IAAM4D,MAAM,GAAG0B,UAAU,CAACC,MAAX,CAAkB;AAC7B1B,EAAAA,SAAS,EAAE;AACPa,IAAAA,IAAI,EAAE;AADC,GADkB;AAI7Bc,EAAAA,MAAM,EAAE;AACJT,IAAAA,GAAG,EAAE,KADD;AAEJC,IAAAA,KAAK,EAAE,KAFH;AAGJF,IAAAA,QAAQ,EAAE,UAHN;AAIJb,IAAAA,eAAe,EAAE,QAJb;AAKJF,IAAAA,OAAO,EAAE,EALL;AAMJ0B,IAAAA,MAAM,EAAE,CANJ;AAOJtB,IAAAA,YAAY,EAAE;AAPV,GAJqB;AAa7BuB,EAAAA,KAAK,EAAE;AACHC,IAAAA,KAAK,EAAE,SADJ;AAEHvB,IAAAA,QAAQ,EAAE;AAFP,GAbsB;AAiB7BiB,EAAAA,QAAQ,EAAC;AACLtB,IAAAA,OAAO,EAAC,EADH;AAELkB,IAAAA,UAAU,EAAC,CAFN;AAGLjB,IAAAA,aAAa,EAAC,CAHT;AAILC,IAAAA,eAAe,EAAC;AAJX;AAjBoB,CAAlB,CAAf","sourcesContent":["\r\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\r\nimport { StyleSheet, View, TouchableOpacity, Platform, Text, Image,Dimensions, ScrollView } from 'react-native';\r\n// iimport { TextInput } from 'react-native-paper';mport MapView, { ILocationProps, IDrawResult, TouchPoint, Marker,PROVIDER_GOOGLE } from '../component';\r\nimport MapView, { Marker } from 'react-native-maps';\r\nimport { TextInput } from 'react-native-paper';\r\n// import { MarkerLocation } from '../assets';\r\n// import AnimatedPolygon from '../components/polygon';\r\nimport HomeSearchResult from '../../components/homeSearch/HomeSearchResult';\r\nimport HomeSearchShowResult from '../../components/homeSearch/HomeSearchShowResult';\r\nimport { RootTabScreenProps } from '../../../types';\r\nimport axios from 'axios'\r\n// import {fetchApi} from '../../service'\r\nimport HomeListItem from '../../components/home/HomeListItem';\r\nimport HomeLookingImage from '../../components/home/HomeLookingImage';\r\nimport LocationLookingImage from '../../components/home/LocationLookingImage';\r\nimport HomeNearItem from '../../components/home/HomeNearItem';\r\nimport HomeNearItem_1 from '../../components/home/HomeNearItem_1';\r\nimport { menuBtn } from '../../../constants/menuBtn';\r\n\r\nconst SearchScreen = ({ navigation }: RootTabScreenProps<any>) => {\r\n    \r\n    const mapRef = useRef<any>(null);\r\n\r\n    const initialPolygon:any = useRef({\r\n        polygons: [],\r\n        distance: 0,\r\n        lastLatLng: undefined,\r\n        initialLatLng: undefined,\r\n        centerLatLng: undefined,\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        fetchUsers()\r\n      },[SearchScreen]);\r\n\r\n    const [showMap, setShowMap]=useState<boolean>(true)\r\n    const [mapData, setMapData]=useState<any>([])\r\n    // const [modePolygon, setPolygonCreated] = useState<boolean>(false);\r\n\r\n    // const [isActiveDraw, setDrawMode] = useState<boolean>(false);\r\n    const [isReady, setIsReady] = useState<boolean>(false);\r\n    // const [points, setPoints] = useState<TouchPoint[]>([]);\r\n    const win = Dimensions.get('window');\r\n    // const [polygon, setPolygon] = useState<IDrawResult>(initialPolygon.current);\r\n    const [markerNum, setMarkerNum] = useState<any>(0);\r\n    const [noteShow, setNoteShow] = useState<boolean>(false);\r\n    const [chooseMarker, setChooseMarker] = useState<boolean>(false);\r\n    const [initRegion, setInitRegion] = useState<any>({\r\n        latitude: 29.858924,\r\n        longitude: -95.587894,\r\n        latitudeDelta: 0.15,\r\n        longitudeDelta: 0.0421,\r\n    });\r\n    const handleMapReady = useCallback(() => mapRef.current && setIsReady(true), []);\r\n\r\n    // const [text, onChangeText] = React.useState('');\r\n    // const [number, onChangeNumber] = React.useState(null);\r\n    // const [getBtninfo, onBtnPress] = React.useState(null)\r\n    \r\n    const [getMenuBtn, setMenuBtn] = React.useState(menuBtn)\r\n  \r\n    // const setMenubutton=(data:any)=>{\r\n    //   menuBtn.forEach((item:any,index:any) => {\r\n    //     getMenuBtn[index]={title:item.title, state:index==data?true:false}\r\n    //   })\r\n    //   setMenuBtn([...getMenuBtn])\r\n    // }\r\n\r\n    \r\n    const fetchUsers = async () => {\r\n\r\n        // console.log('fetch mapdata start:-----',mapData)\r\n        await fetch('http://ec2-3-144-42-178.us-east-2.compute.amazonaws.com:5000/api/user/089c839e-5a55-471f-ac5d-62dba5f4fa65/getFilteredListingsAtLocation?latitude=29.858924&longitude=-95.587894&radius=0.02',\r\n        \r\n        {\r\n            method: 'get',\r\n            headers: {\r\n                'Content-Type': \"application/json\",\r\n                'password': 'passwordAUA'\r\n            },\r\n\r\n        })\r\n        .then((response) => response.json())\r\n        .then((responseJson) => {\r\n            // console.log('responseJson:----',responseJson)\r\n            setMapData([...responseJson])\r\n            // responseJson.data && setMapData(responseJson.data)\r\n        }).catch((error) => {\r\n            fetchUsers()\r\n        })\r\n\r\n      };\r\n        // fetchUsers()\r\n    // const handleRemovePolygon = useCallback(() => {\r\n    //     setPolygon(initialPolygon.current);\r\n    //     setPolygonCreated(false);\r\n    // }, []);\r\n\r\n    // const handleClear = useCallback(() => {\r\n    //     setPolygon(initialPolygon.current);\r\n    //     setPolygonCreated(false);\r\n    //     setPoints([]);\r\n    // }, []);\r\n\r\n    // const handleIsDraw = useCallback(() => {\r\n    //     setChooseMarker(false)\r\n    //     if (!mapRef.current) return;\r\n    //     if (!isActiveDraw) {\r\n    //         handleClear()\r\n    //     }\r\n    //     setDrawMode((prevMode) => !prevMode);\r\n    // }, [handleClear, isActiveDraw]);\r\n\r\n    // const handleCanvasEndDraw = useCallback((locations) => {\r\n           \r\n    //     setNoteShow(true)\r\n    //     zoomCenterPolygon(locations.centerLatLng).then(() => {\r\n    //         setPolygon(locations);\r\n    //         setPolygonCreated(true);\r\n    //     });\r\n    //     setDrawMode((prevMode) => !prevMode);\r\n    //     console.log('locations:',noteShow)\r\n    // }, []);\r\n\r\n    // const zoomCenterPolygon = async (center: ILocationProps) => {\r\n    //     if (!mapRef.current) return;\r\n    //     const camera = await mapRef.current.getCamera();\r\n    //     if (Platform.OS === 'ios') {\r\n    //         mapRef.current.animateCamera({\r\n    //             center: center,\r\n    //         });\r\n    //     }\r\n    //     if (Platform.OS === 'android') {\r\n    //     }\r\n    // };\r\n\r\n    const zoomOut = async () => {\r\n        if (!mapRef.current) return false;\r\n\r\n        const camera = await mapRef.current.getCamera();\r\n        if (Platform.OS === 'ios') {\r\n            mapRef.current.animateCamera({ altitude: camera.altitude * 0.9 });\r\n        }\r\n\r\n        if (Platform.OS === 'android') {\r\n            mapRef.current.animateCamera({ zoom: camera.zoom - 1 });\r\n        }\r\n        setChooseMarker(false)\r\n    };\r\n\r\n    const zoomIn = async () => {\r\n        const camera = await mapRef.current.getCamera();\r\n        if (Platform.OS === 'ios') {\r\n            mapRef.current.animateCamera({ altitude: camera.altitude * 1.1 });\r\n        }\r\n\r\n        if (Platform.OS === 'android') {\r\n            mapRef.current.animateCamera({ zoom: camera.zoom + 1 });\r\n        }\r\n        setChooseMarker(false)\r\n    }\r\n\r\n    const markerClick = (num:any) => {\r\n        setMarkerNum(num)\r\n        setChooseMarker(true)\r\n    }\r\n\r\n    // const hasMarkerClose = useCallback(\r\n    //     (item,index)=>{console.log(mapData);mapData[index] && mapData[index].latitude && mapData[index].longitude&&\r\n    //     <Marker key={index} coordinate={{ latitude:mapData[index].latitude, longitude:mapData[index].longitude }} onPress={() => markerClick(index)}>\r\n    //         <View><Image source={require('../../../assets/icons/maker_custom.png')} style={{width: 39, height: 84 }} resizeMode=\"contain\"></Image></View>\r\n    //     </Marker>},[]\r\n    //     )\r\n\r\n    // const handlePolygon = useCallback(\r\n    //     (item, index) => <AnimatedPolygon key={index} coordinates={polygon.polygons} />,\r\n    //     [polygon.polygons],\r\n    // );\r\n\r\n    // const onChangePoints = useCallback((value) => {\r\n    //     setPoints(value);\r\n    // }, []);\r\n\r\n    const closeNote = () => {\r\n        setNoteShow(false)\r\n    }\r\n\r\n    const chooseItem = (num:any) => {\r\n        console.log(num)\r\n        setShowMap(true)\r\n        setMarkerNum(num)\r\n        setChooseMarker(true)\r\n        setInitRegion({latitude:mapData[num].latitude, \r\n                      longitude:mapData[num].longitude,\r\n                      latitudeDelta:initRegion.latitudeDelta,\r\n                      longitudeDelta:initRegion.longitudeDelta})\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={{flexDirection:'row',padding:20,paddingBottom:5,backgroundColor:'white'}}>\r\n            {/* <TextInput style={[styles.input,{width:(win.width-60)}]} placeholder=\"I'm looking for...\" placeholderTextColor={'#D0D8E0'} onChangeText={onChangeText} value={text}/> */}\r\n                <TextInput\r\n                        autoComplete={'pass'}\r\n                        mode=\"outlined\"\r\n                        placeholder='Search address, or near you'\r\n                        outlineColor='#F2F3F7'\r\n                        activeOutlineColor='#888888'\r\n                        style={{height:40,borderRadius:10,fontSize:14,\r\n                            width:win.width-110}}\r\n                        right={<TextInput.Icon style={{marginTop:15}} name=\"microphone\" color='#D0D8E0'/>}\r\n                    />\r\n                <TouchableOpacity  onPress={() => setShowMap(!showMap)}>\r\n                    <Image style={{width:20,height:20,marginTop:15,marginLeft:10,marginRight:10}} source={showMap?require('../../../assets/icons/Group.png'):require('../../../assets/icons/Group_(2).png')}/>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity>\r\n                  <Image style={{width:20,height:20,marginTop:15,marginRight:5}} source={require('../../../assets/icons/sliders.png')}/>\r\n                </TouchableOpacity>\r\n            </View>\r\n            <View style={{flex: 1}}>\r\n                {showMap?<View style={{flex: 1}}>\r\n                    <MapView\r\n                        ref={mapRef}\r\n                        style={{ flex: 1 }}\r\n                        // points={points}\r\n                        // widthLine={5}\r\n                        // onEndDraw={handleCanvasEndDraw}\r\n                        // isDrawMode={isActiveDraw}\r\n                        onMapReady={handleMapReady}\r\n                        // onStartDraw={handleClear}\r\n                        // createdPolygon={modePolygon}\r\n                        // onChangePoints={onChangePoints}\r\n                        // backgroundCanvas={'rgba(0, 0, 0, 0.0)'}\r\n                        provider={'google'}\r\n                        showsMyLocationButton={true}\r\n                        showsUserLocation={true}\r\n                        zoomControlEnabled={true}\r\n                        zoomEnabled={true}\r\n                        zoomTapEnabled={true}\r\n                        showsScale={true}\r\n                        initialRegion={initRegion}\r\n                    >\r\n                      {mapData.map((item:any, index:any)=>\r\n                      item && item.latitude && item.longitude&&<Marker key={index}\r\n                          coordinate={{latitude: item.latitude, longitude: item.longitude}}\r\n                          onPress={() => markerClick(index)}\r\n                      >\r\n                        <Image source={require('../../../assets/icons/maker_custom.png')} style={{width: 39, height: 84 }} resizeMode=\"contain\"></Image>\r\n                      </Marker>)}\r\n                        {/* {\r\n                        isReady &&\r\n                            modePolygon &&\r\n                            polygon.polygons &&\r\n                            polygon.polygons.length > 0 && (\r\n                                <> */}\r\n                                    {/* {mapData.map(hasMarkerClose)} */}\r\n                                    {/* {polygon.polygons.map(handlePolygon)} */}\r\n                                {/* </>\r\n                            ) \r\n                            } */}\r\n                    </MapView>\r\n                    <View style={{position:'absolute',top:20,right:20,backgroundColor:'white',borderRadius:30}}>\r\n                        <View style={{padding:5,paddingTop:5,paddingBottom:5}}>\r\n                            <TouchableOpacity style={{borderRadius:30}} onPress={zoomIn}>\r\n                                <Image style={{width:35,height:35,borderRadius:30}} source={ require('../../../assets/icons/Vector_(7).png')}/>\r\n                            </TouchableOpacity> \r\n                        </View>\r\n                        <View style={{padding:5,paddingTop:5,paddingBottom:13}}>\r\n                            <TouchableOpacity style={{borderRadius:30}} onPress={zoomOut}>\r\n                                <Image style={{width:35,height:20,borderRadius:30}} source={require('../../../assets/icons/Vector_(8).png')}/>\r\n                            </TouchableOpacity>\r\n                        </View>\r\n                    </View>\r\n                    <View style={{position:'absolute',top:110,right:20}}>\r\n                        <TouchableOpacity style={{padding:8,backgroundColor:'white',borderRadius:30}}>\r\n                            <Image style={{width:28,height:28}} source={ require('../../../assets/icons/Group_(3).png')}/>\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                    {/* <View style={{position:'absolute',top:163,right:20,borderRadius:40}}>\r\n                        <TouchableOpacity onPress={handleIsDraw}>\r\n                            {isActiveDraw ? (\r\n                                <Image style={{width:45,height:45,borderRadius:18}} source={require('../../../assets/icons/fluent_hand-draw-24-regular_(1).png')}/>\r\n                            ) : (\r\n                                <Image style={{width:45,height:45,borderRadius:18}} source={require('../../../assets/icons/fluent_hand-draw-24-regular.png')}/>\r\n                            )}\r\n                            \r\n                        </TouchableOpacity>\r\n                    </View> */}\r\n                    <View style={{width:win.width-30,marginLeft:15,position:'absolute',bottom:90}}>\r\n                        {chooseMarker && <HomeSearchResult indexData={mapData[markerNum]} />}\r\n                        {noteShow && <HomeSearchShowResult indexData={{resultNum:mapData.length}} closeNote={closeNote}/>}\r\n                    </View>\r\n                </View>\r\n                :\r\n\r\n                <View style={{flex:1}}>\r\n                    <ScrollView>\r\n                        <View style={styles.homeview}>\r\n                            <View style={{flex:18,backgroundColor:'white',width:'100%'}}>\r\n                                <ScrollView>\r\n                                    {mapData.map((item:any,index:any)=>{return<HomeListItem key={index} indexData={item} num={index} chooseItem={()=>chooseItem(index)}/>})}\r\n                                </ScrollView>\r\n                            </View>\r\n                            {/* <View style={{flex:6}}>\r\n                                <ScrollView style={{marginTop:15}} horizontal={true}>\r\n                                    <HomeLookingImage imageData={{distance:'18km',name:'Dreamsville House',description:'$129,990',imageUrl:'../../../assets/images/webaliser-_TPTXZd9mOo-unsplash 1.png'}}/>\r\n                                    <HomeLookingImage imageData={{distance:'18km',name:'Dreamsville House',description:'$129,990',imageUrl:'../../../assets/images/webaliser-_TPTXZd9mOo-unsplash 1.png'}}/>\r\n                                </ScrollView>\r\n                            </View>\r\n                            <View style={{flex:5}}>\r\n                                <View style={{height:50,flexDirection:'row',paddingTop:10}}>\r\n                                    <Text style={{fontSize:24,fontWeight:'600'}} > Looking in location </Text>\r\n                                    <Image style={{width:20,height:15,margin:11,marginLeft:'auto',marginRight:10}} source={require('../../../assets/icons/Vector_(3).png')}/>\r\n                                </View>\r\n                                <ScrollView style={{marginTop:10}} horizontal={true}>\r\n                                    <LocationLookingImage indexData={{name:'Name House',location:'Pasuruan',distance:'1.2km',isNew:true}}></LocationLookingImage>\r\n                                    <LocationLookingImage indexData={{name:'Name House',location:'Pasuruan',distance:'1.2km',isNew:true}}></LocationLookingImage>\r\n                                    <LocationLookingImage indexData={{name:'Name House',location:'Pasuruan',distance:'1.2km',isNew:true}}></LocationLookingImage>\r\n                                </ScrollView>\r\n                            </View>\r\n                            <View style={{flex:7}}>\r\n                                <View style={{height:50,paddingTop:10}}>\r\n                                <Text style={{fontSize:24,fontWeight:'600'}} > Recomended for you</Text>\r\n                                </View>\r\n                                <ScrollView style={{marginTop:10}} horizontal={true}>\r\n                                    <LocationLookingImage indexData={{name:'Name House',location:'Pasuruan',distance:'1.2km'}}></LocationLookingImage>\r\n                                    <LocationLookingImage indexData={{name:'Name House',location:'Pasuruan',distance:'1.2km'}}></LocationLookingImage>\r\n                                    <LocationLookingImage indexData={{name:'Name House',location:'Pasuruan',distance:'1.2km'}}></LocationLookingImage>        \r\n                                </ScrollView>\r\n                            </View> */}\r\n                            <View style={{height:100}}>\r\n\r\n                            </View>\r\n                        </View>\r\n                    </ScrollView>\r\n                </View>}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default SearchScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n    },\r\n    button: {\r\n        top: '10%',\r\n        right: '10%',\r\n        position: 'absolute',\r\n        backgroundColor: 'tomato',\r\n        padding: 16,\r\n        zIndex: 4,\r\n        borderRadius: 18,\r\n    },\r\n    title: {\r\n        color: '#FFFFFF',\r\n        fontSize: 12,\r\n    },\r\n    homeview:{\r\n        padding:15,\r\n        paddingTop:0,\r\n        paddingBottom:0,\r\n        backgroundColor:'white'\r\n    },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}