{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { styles } from \"../../screens/authScreens/styles.js\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { TextInput } from 'react-native-paper';\nimport React, { useState } from 'react';\nimport { CheckBox } from 'react-native-elements';\nimport { Text } from \"../../components/Themed\";\nimport { useToast } from \"react-native-toast-notifications\";\nimport Auth from '@aws-amplify/auth';\n\nvar CreatePassword = function CreatePassword(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      checked = _useState2[0],\n      setChecked = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newPassword = _useState6[0],\n      setNewPassword = _useState6[1];\n\n  var _useState7 = useState(true),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showPassword = _useState8[0],\n      setShowPassword = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      buttonLoader = _useState10[0],\n      setButtonLoader = _useState10[1];\n\n  var _useState11 = useState(''),\n      _useState12 = _slicedToArray(_useState11, 2),\n      password_error = _useState12[0],\n      setPassword_error = _useState12[1];\n\n  var _useState13 = useState(''),\n      _useState14 = _slicedToArray(_useState13, 2),\n      newPassword_error = _useState14[0],\n      setNewPassword_error = _useState14[1];\n\n  var toast = useToast();\n\n  var onSetPassword = function onSetPassword() {\n    var _route$params = route.params,\n        username = _route$params.username,\n        otp = _route$params.otp;\n\n    if (password) {\n      if (newPassword) {\n        if (password === newPassword) {\n          setButtonLoader(true);\n          Auth.forgotPasswordSubmit(username, otp, newPassword).then(function () {\n            setButtonLoader(false);\n            toast.show('success.', {\n              type: \"success\",\n              successColor: \"#7BC67E\",\n              duration: 4000,\n              animationType: \"slide-in\"\n            });\n            navigation.navigate('Login');\n          }).catch(function (err) {\n            setButtonLoader(false);\n\n            if (err.message) {\n              toast.show(err.message + username + otp + newPassword, {\n                type: \"danger\",\n                dangerColor: '#FF737F',\n                duration: 4000,\n                animationType: \"slide-in\"\n              });\n            }\n          });\n        } else {\n          toast.show('Password Mismatch', {\n            type: \"danger\",\n            dangerColor: '#FF737F',\n            duration: 4000,\n            animationType: \"slide-in\"\n          });\n        }\n      } else {\n        setNewPassword_error('Password Required !');\n      }\n    } else {\n      setPassword_error(\"Password Required !\");\n    }\n  };\n\n  function handleInput(text, fieldType) {\n    if (fieldType === \"newPassword\") {\n      setNewPassword(text);\n      setNewPassword_error('');\n    } else if (fieldType === \"password\") {\n      setPassword(text);\n      setPassword_error('');\n    }\n  }\n\n  return React.createElement(View, {\n    style: styles.loginWrap\n  }, React.createElement(View, null, React.createElement(View, {\n    style: {\n      width: 50,\n      height: 50,\n      margin: '5%'\n    }\n  })), React.createElement(View, {\n    style: {\n      marginBottom: 15\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    }\n  }, React.createElement(Text, {\n    style: styles.title\n  }, \"Create New Password\")), React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    }\n  }, React.createElement(Text, {\n    style: styles.subTextForgot\n  }, \"New Password should be different from previous password!\"))), React.createElement(View, {\n    style: styles.loginForm\n  }, React.createElement(TextInput, {\n    theme: {\n      roundness: 16\n    },\n    underlineColorAndroid: \"transparent\",\n    outlineColor: password_error ? \"#B00020\" : \"transparent\",\n    activeOutlineColor: password_error ? \"#B00020\" : \"#30C0E9\",\n    value: password,\n    onChangeText: function onChangeText(text) {\n      handleInput(text, 'password');\n    },\n    label: \"Password\",\n    secureTextEntry: showPassword ? true : false,\n    autoComplete: 'pass',\n    mode: \"outlined\",\n    error: false,\n    right: React.createElement(TextInput.Icon, {\n      onPress: function onPress() {\n        setShowPassword(!showPassword);\n      },\n      name: \"eye\"\n    })\n  }), React.createElement(Text, {\n    style: styles.err_txt\n  }, password_error)), React.createElement(View, {\n    style: styles.loginForm\n  }, React.createElement(TextInput, {\n    theme: {\n      roundness: 16\n    },\n    underlineColorAndroid: \"transparent\",\n    outlineColor: newPassword_error ? \"#B00020\" : \"transparent\",\n    activeOutlineColor: newPassword_error ? \"#B00020\" : \"#30C0E9\",\n    value: newPassword,\n    onChangeText: function onChangeText(text) {\n      handleInput(text, 'newPassword');\n    },\n    label: \"New Password\",\n    secureTextEntry: showPassword ? true : false,\n    autoComplete: 'pass',\n    mode: \"outlined\",\n    error: false,\n    right: React.createElement(TextInput.Icon, {\n      onPress: function onPress() {\n        setShowPassword(!showPassword);\n      },\n      name: \"eye\"\n    })\n  }), React.createElement(Text, {\n    style: styles.err_txt\n  }, newPassword_error)), React.createElement(View, {\n    style: styles.subTextView\n  }, React.createElement(Text, {\n    style: styles.subText\n  }, \"Minimum of  characters, with upper and lowercase and a number, or a symbol.\")), React.createElement(CheckBox, {\n    title: \"I have read the Privace Policy\",\n    checked: checked,\n    onPress: function onPress() {\n      setChecked(!checked);\n    }\n  }), React.createElement(View, {\n    style: {\n      padding: '7%',\n      width: '100%',\n      justifyContent: 'center'\n    }\n  }, buttonLoader ? React.createElement(TouchableOpacity, {\n    disabled: true,\n    onPress: function onPress() {}\n  }, React.createElement(ActivityIndicator, {\n    style: styles.btnStyle,\n    size: \"small\",\n    color: \"#fff\"\n  })) : React.createElement(TouchableOpacity, {\n    disabled: checked ? false : true,\n    onPress: onSetPassword\n  }, React.createElement(Text, {\n    style: styles.btnStyle\n  }, \"GET STARTED\"))));\n};\n\nexport default CreatePassword;","map":{"version":3,"sources":["D:/Tasks/Freelancer/Danil/ReactNative/mine/map/screens/authScreens/CreatePasswordScreen.tsx"],"names":["styles","TextInput","React","useState","CheckBox","Text","useToast","Auth","CreatePassword","navigation","route","checked","setChecked","password","setPassword","newPassword","setNewPassword","showPassword","setShowPassword","buttonLoader","setButtonLoader","password_error","setPassword_error","newPassword_error","setNewPassword_error","toast","onSetPassword","params","username","otp","forgotPasswordSubmit","then","show","type","successColor","duration","animationType","navigate","catch","err","message","dangerColor","handleInput","text","fieldType","loginWrap","width","height","margin","marginBottom","alignItems","title","subTextForgot","loginForm","roundness","err_txt","subTextView","subText","padding","justifyContent","btnStyle"],"mappings":"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","sourcesContent":["import { styles } from '../../screens/authScreens/styles.js';\nimport { View, TouchableOpacity, ToastAndroid, ActivityIndicator, Platform } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { NavigationProp } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport { CheckBox } from 'react-native-elements';\nimport { Text } from '../../components/Themed';\nimport { useToast } from \"react-native-toast-notifications\";\nimport Auth from '@aws-amplify/auth';\n\nconst CreatePassword = ({ navigation, route }: { navigation: NavigationProp<any>, route: any }) => {\n\tconst [checked, setChecked] = useState(false);\n\tconst [password, setPassword] = useState('');\n\tconst [newPassword, setNewPassword] = useState('');\n\tconst [showPassword, setShowPassword] = useState(true);\n\tconst [buttonLoader, setButtonLoader] = useState(false);\n\tconst [password_error, setPassword_error] = useState('');\n\tconst [newPassword_error, setNewPassword_error] = useState('');\n\tconst toast = useToast();\n\n\tconst onSetPassword = () => {\n\t\tconst { username, otp } = route.params;\n\t\tif (password) {\n\t\t\tif (newPassword) {\n\t\t\t\tif (password === newPassword) {\n\t\t\t\t\tsetButtonLoader(true);\n\t\t\t\t\tAuth.forgotPasswordSubmit(username, otp, newPassword)\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tsetButtonLoader(false);\n\t\t\t\t\t\t\ttoast.show('success.', {\n\t\t\t\t\t\t\t\ttype: \"success\",\n\t\t\t\t\t\t\t\tsuccessColor: \"#7BC67E\",\n\t\t\t\t\t\t\t\tduration: 4000,\n\t\t\t\t\t\t\t\tanimationType: \"slide-in\",\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tnavigation.navigate('Login');\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\t\tsetButtonLoader(false);\n\t\t\t\t\t\t\tif (err.message) {\n\t\t\t\t\t\t\t\ttoast.show(err.message + username + otp + newPassword, {\n\t\t\t\t\t\t\t\t\ttype: \"danger\",\n\t\t\t\t\t\t\t\t\tdangerColor: '#FF737F',\n\t\t\t\t\t\t\t\t\tduration: 4000,\n\t\t\t\t\t\t\t\t\tanimationType: \"slide-in\",\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\ttoast.show('Password Mismatch', {\n\t\t\t\t\t\ttype: \"danger\",\n\t\t\t\t\t\tdangerColor: '#FF737F',\n\t\t\t\t\t\tduration: 4000,\n\t\t\t\t\t\tanimationType: \"slide-in\",\n\t\t\t\t\t});\n\t\t\t\t\t// if (Platform.OS == 'android') ToastAndroid.showWithGravity('Password Mismatch', ToastAndroid.SHORT, ToastAndroid.BOTTOM);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetNewPassword_error('Password Required !')\n\t\t\t}\n\t\t} else {\n\t\t\tsetPassword_error(\"Password Required !\")\n\t\t}\n\t}\n\n\tfunction handleInput(text: string, fieldType: string) {\n\t\tif (fieldType === \"newPassword\") {\n\t\t\tsetNewPassword(text)\n\t\t\tsetNewPassword_error('')\n\t\t} else if (fieldType === \"password\") {\n\t\t\tsetPassword(text)\n\t\t\tsetPassword_error('')\n\t\t}\n\t}\n\n\treturn (\n\t\t<View style={styles.loginWrap}>\n\t\t\t<View >\n\t\t\t\t<View style={{ width: 50, height: 50, margin: '5%' }}></View>\n\t\t\t</View>\n\t\t\t<View style={{ marginBottom: 15 }}>\n\t\t\t\t<View style={{ alignItems: 'center' }}>\n\t\t\t\t\t<Text style={styles.title}>Create New Password</Text>\n\t\t\t\t</View>\n\t\t\t\t<View style={{ alignItems: 'center', }}>\n\t\t\t\t\t<Text style={styles.subTextForgot}>New Password should be different from previous password!</Text>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t\t{/* <View style={{ display: 'flex', alignItems: 'center', flex: 1}}></View> */}\n\t\t\t<View style={styles.loginForm}>\n\t\t\t\t<TextInput\n\t\t\t\t\ttheme={{\n\t\t\t\t\t\troundness: 16,\n\t\t\t\t\t}}\n\t\t\t\t\tunderlineColorAndroid=\"transparent\"\n\t\t\t\t\toutlineColor={password_error ? \"#B00020\" : \"transparent\"}\n\t\t\t\t\tactiveOutlineColor={password_error ? \"#B00020\" : \"#30C0E9\"}\n\t\t\t\t\tvalue={password}\n\t\t\t\t\tonChangeText={text => { handleInput(text, 'password') }}\n\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\tsecureTextEntry={showPassword ? true : false}\n\t\t\t\t\tautoComplete={'pass'}\n\t\t\t\t\tmode=\"outlined\"\n\t\t\t\t\terror={false}\n\t\t\t\t\tright={<TextInput.Icon onPress={() => { setShowPassword(!showPassword) }} name=\"eye\" />}\n\t\t\t\t/>\n\t\t\t\t<Text style={styles.err_txt}>{password_error}</Text>\n\t\t\t\t{/* <HelperText type=\"error\" visible={!!password_error}>{password_error}</HelperText> */}\n\t\t\t</View>\n\t\t\t<View style={styles.loginForm}>\n\t\t\t\t<TextInput\n\t\t\t\t\ttheme={{\n\t\t\t\t\t\troundness: 16,\n\t\t\t\t\t}}\n\t\t\t\t\tunderlineColorAndroid=\"transparent\"\n\t\t\t\t\toutlineColor={newPassword_error ? \"#B00020\" : \"transparent\"}\n\t\t\t\t\tactiveOutlineColor={newPassword_error ? \"#B00020\" : \"#30C0E9\"}\n\t\t\t\t\tvalue={newPassword}\n\t\t\t\t\tonChangeText={text => { handleInput(text, 'newPassword') }}\n\t\t\t\t\tlabel=\"New Password\"\n\t\t\t\t\tsecureTextEntry={showPassword ? true : false}\n\t\t\t\t\tautoComplete={'pass'}\n\t\t\t\t\tmode=\"outlined\"\n\t\t\t\t\terror={false}\n\t\t\t\t\tright={<TextInput.Icon onPress={() => { setShowPassword(!showPassword) }} name=\"eye\" />}\n\t\t\t\t/>\n\t\t\t\t<Text style={styles.err_txt}>{newPassword_error}</Text>\n\t\t\t\t{/* <HelperText type=\"error\" visible={!!newPassword_error}>{newPassword_error}</HelperText> */}\n\t\t\t</View>\n\t\t\t<View style={styles.subTextView}>\n\t\t\t\t<Text style={styles.subText}>Minimum of  characters, with upper and lowercase and a number, or a symbol.</Text>\n\t\t\t</View>\n\t\t\t<CheckBox\n\t\t\t\t// outlineColor=\"transparent\"\n\t\t\t\ttitle='I have read the Privace Policy'\n\t\t\t\tchecked={checked}\n\t\t\t\tonPress={() => {\n\t\t\t\t\tsetChecked(!checked);\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<View style={{ padding: '7%', width: '100%', justifyContent: 'center' }}>\n\t\t\t\t{\n\t\t\t\t\tbuttonLoader\n\t\t\t\t\t\t? <TouchableOpacity\n\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\tonPress={() => { }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ActivityIndicator style={styles.btnStyle} size=\"small\" color=\"#fff\" />\n\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t\t: <TouchableOpacity\n\t\t\t\t\t\t\tdisabled={checked ? false : true}\n\t\t\t\t\t\t\tonPress={onSetPassword}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Text style={styles.btnStyle} >GET STARTED</Text>\n\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t}\n\t\t\t</View>\n\n\t\t</View>\n\t);\n};\n\nexport default CreatePassword;\n"]},"metadata":{},"sourceType":"module"}