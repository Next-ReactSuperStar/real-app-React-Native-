{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { styles } from \"../../screens/authScreens/styles.js\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport React, { useState } from 'react';\nimport { Text } from \"../../components/Themed\";\nimport { TextInput } from 'react-native-paper';\nimport { useToast } from \"react-native-toast-notifications\";\nimport Auth from '@aws-amplify/auth';\n\nvar ForgotPass = function ForgotPass(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      username = _useState2[0],\n      setUsername = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      username_error = _useState4[0],\n      setUsernameError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      buttonLoader = _useState6[0],\n      setButtonLoader = _useState6[1];\n\n  var toast = useToast();\n\n  function handleInput(text) {\n    setUsername(text);\n    setUsernameError('');\n  }\n\n  var onForgot = function onForgot() {\n    if (username) {\n      setButtonLoader(true);\n      Auth.forgotPassword(username).then(function () {\n        setButtonLoader(false);\n        navigation.navigate('EnterCode', {\n          username: username,\n          screen: 'forgot-password'\n        });\n      }).catch(function (err) {\n        if (err.message) {\n          setButtonLoader(false);\n          toast.show(err.message, {\n            type: \"danger\",\n            dangerColor: '#FF737F',\n            duration: 4000,\n            animationType: \"slide-in\"\n          });\n        }\n      });\n    } else {\n      setUsernameError('User Name Required');\n    }\n  };\n\n  return React.createElement(KeyboardAvoidingView, {\n    style: styles.containerDiv\n  }, React.createElement(View, {\n    style: styles.loginWrap\n  }, React.createElement(View, {\n    style: {\n      width: 80\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return navigation.goBack();\n    }\n  }, React.createElement(Image, {\n    style: {\n      width: 50,\n      height: 50,\n      margin: '5%'\n    },\n    source: require(\"../../assets/icons/backBtn.png\")\n  }))), React.createElement(View, {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      flex: 1\n    }\n  }), React.createElement(View, {\n    style: {\n      marginBottom: 15\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    }\n  }, React.createElement(Text, {\n    style: styles.title\n  }, \"Forgot password\")), React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    }\n  }, React.createElement(Text, {\n    style: styles.subTextForgot\n  }, \"Please enter your User Name specified during registration\"))), React.createElement(View, {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      flex: 1\n    }\n  }), React.createElement(View, {\n    style: styles.loginForm\n  }, React.createElement(TextInput, {\n    theme: {\n      roundness: 16\n    },\n    underlineColorAndroid: \"transparent\",\n    outlineColor: username_error ? \"#B00020\" : \"transparent\",\n    activeOutlineColor: username_error ? \"#B00020\" : \"#30C0E9\",\n    label: \"User Name\",\n    autoComplete: 'pass',\n    mode: \"outlined\",\n    value: username,\n    onChangeText: function onChangeText(text) {\n      return handleInput(text);\n    },\n    error: false\n  }), React.createElement(Text, {\n    style: styles.err_txt\n  }, username_error)), React.createElement(View, {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      flex: 1\n    }\n  }), React.createElement(View, {\n    style: {\n      padding: '7%',\n      width: '100%',\n      justifyContent: 'center'\n    }\n  }, buttonLoader ? React.createElement(TouchableOpacity, {\n    disabled: true,\n    onPress: function onPress() {}\n  }, React.createElement(ActivityIndicator, {\n    style: styles.btnStyle,\n    size: \"small\",\n    color: \"#fff\"\n  })) : React.createElement(TouchableOpacity, {\n    disabled: username ? false : true,\n    onPress: onForgot\n  }, React.createElement(Text, {\n    style: styles.btnStyle\n  }, \"Send\"))), React.createElement(View, {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      flex: 3\n    }\n  })));\n};\n\nexport default ForgotPass;","map":{"version":3,"sources":["D:/working/ReactNative/Real_estate/New folder/screens/authScreens/ForgotPassScreen.tsx"],"names":["styles","React","useState","Text","TextInput","useToast","Auth","ForgotPass","navigation","username","setUsername","username_error","setUsernameError","buttonLoader","setButtonLoader","toast","handleInput","text","onForgot","forgotPassword","then","navigate","screen","catch","err","message","show","type","dangerColor","duration","animationType","containerDiv","loginWrap","width","goBack","height","margin","require","display","alignItems","flex","marginBottom","title","subTextForgot","loginForm","roundness","err_txt","padding","justifyContent","btnStyle"],"mappings":"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","sourcesContent":["import { styles } from '../../screens/authScreens/styles.js';\nimport { Image, View, ScrollView, TouchableOpacity, ToastAndroid, KeyboardAvoidingView, ActivityIndicator } from 'react-native';\nimport { NavigationProp } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport { Text } from '../../components/Themed';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { useToast } from \"react-native-toast-notifications\";\nimport Auth from '@aws-amplify/auth';\n\nconst ForgotPass = ({ navigation }: { navigation: NavigationProp<any>, route: any }) => {\n\tconst [username, setUsername] = useState('');\n\tconst [username_error, setUsernameError] = useState('');\n\tconst [buttonLoader, setButtonLoader] = useState(false);\n\tconst toast = useToast();\n\n\tfunction handleInput(text: string) {\n\t\tsetUsername(text)\n\t\tsetUsernameError('')\n\t}\n\n\tconst onForgot = () => {\n\t\tif (username) {\n\t\t\tsetButtonLoader(true);\n\t\t\tAuth.forgotPassword(username)\n\t\t\t\t.then(() => {\n\t\t\t\t\tsetButtonLoader(false);\n\t\t\t\t\tnavigation.navigate('EnterCode', { username, screen: 'forgot-password' });\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tif (err.message) {\n\t\t\t\t\t\tsetButtonLoader(false);\n\t\t\t\t\t\ttoast.show(err.message, {\n\t\t\t\t\t\t\ttype: \"danger\",\n\t\t\t\t\t\t\tdangerColor: '#FF737F',\n\t\t\t\t\t\t\tduration: 4000,\n\t\t\t\t\t\t\tanimationType: \"slide-in\",\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// ToastAndroid.showWithGravity(err.message, ToastAndroid.SHORT, ToastAndroid.BOTTOM);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t} else {\n\t\t\tsetUsernameError('User Name Required');\n\t\t}\n\t}\n\treturn (\n\t\t<KeyboardAvoidingView style={styles.containerDiv}>\n\t\t\t<View style={styles.loginWrap}>\n\t\t\t\t<View style={{ width: 80 }}>\n\t\t\t\t\t<TouchableOpacity\n\t\t\t\t\t\tonPress={() => navigation.goBack()} >\n\t\t\t\t\t\t<Image style={{ width: 50, height: 50, margin: '5%' }} source={require('../../assets/icons/backBtn.png')} />\n\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t</View>\n\t\t\t\t{/* <View style={{ display: 'flex', alignItems: 'center', flex: 1 }}></View> */}\n\t\t\t\t<View style={{ display: 'flex', alignItems: 'center', flex: 1 }}></View>\n\t\t\t\t<View style={{ marginBottom: 15 }}>\n\t\t\t\t\t<View style={{ alignItems: 'center' }}>\n\t\t\t\t\t\t<Text style={styles.title}>Forgot password</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<View style={{ alignItems: 'center', }}>\n\t\t\t\t\t\t<Text style={styles.subTextForgot}>Please enter your User Name specified during registration</Text>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t\t<View style={{ display: 'flex', alignItems: 'center', flex: 1 }}></View>\n\t\t\t\t<View style={styles.loginForm}>\n\t\t\t\t\t<TextInput\n\t\t\t\t\t\ttheme={{\n\t\t\t\t\t\t\troundness: 16,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tunderlineColorAndroid=\"transparent\"\n\t\t\t\t\t\toutlineColor={username_error ? \"#B00020\" : \"transparent\"}\n\t\t\t\t\t\tactiveOutlineColor={username_error ? \"#B00020\" : \"#30C0E9\"}\n\t\t\t\t\t\tlabel=\"User Name\"\n\t\t\t\t\t\tautoComplete={'pass'}\n\t\t\t\t\t\tmode=\"outlined\"\n\t\t\t\t\t\tvalue={username}\n\t\t\t\t\t\tonChangeText={text => handleInput(text)}\n\t\t\t\t\t\terror={false}\n\t\t\t\t\t/>\n\t\t\t\t\t<Text style={styles.err_txt}>{username_error}</Text>\n\t\t\t\t\t{/* <HelperText type=\"error\" visible={username_error}>{username_error}</HelperText> */}\n\t\t\t\t</View>\n\t\t\t\t<View style={{ display: 'flex', alignItems: 'center', flex: 1 }}></View>\n\t\t\t\t<View style={{ padding: '7%', width: '100%', justifyContent: 'center' }}>\n\t\t\t\t\t{\n\t\t\t\t\t\tbuttonLoader\n\t\t\t\t\t\t\t? <TouchableOpacity\n\t\t\t\t\t\t\t\tdisabled\n\t\t\t\t\t\t\t\tonPress={() => { }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<ActivityIndicator style={styles.btnStyle} size=\"small\" color=\"#fff\" />\n\t\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t\t\t: <TouchableOpacity\n\t\t\t\t\t\t\t\tdisabled={username ? false : true}\n\t\t\t\t\t\t\t\tonPress={onForgot}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Text style={styles.btnStyle} >Send</Text>\n\t\t\t\t\t\t\t</TouchableOpacity>\n\t\t\t\t\t}\n\t\t\t\t</View>\n\t\t\t\t<View style={{ display: 'flex', alignItems: 'center', flex: 3 }}></View>\n\t\t\t</View>\n\t\t</KeyboardAvoidingView>\n\t);\n};\nexport default ForgotPass;\n"]},"metadata":{},"sourceType":"module"}